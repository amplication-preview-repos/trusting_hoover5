/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Locations as PrismaLocations } from "@prisma/client";

export class LocationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LocationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.locations.count(args);
  }

  async locationsItems(
    args: Prisma.LocationsFindManyArgs
  ): Promise<PrismaLocations[]> {
    return this.prisma.locations.findMany(args);
  }
  async locations(
    args: Prisma.LocationsFindUniqueArgs
  ): Promise<PrismaLocations | null> {
    return this.prisma.locations.findUnique(args);
  }
  async createLocations(
    args: Prisma.LocationsCreateArgs
  ): Promise<PrismaLocations> {
    return this.prisma.locations.create(args);
  }
  async updateLocations(
    args: Prisma.LocationsUpdateArgs
  ): Promise<PrismaLocations> {
    return this.prisma.locations.update(args);
  }
  async deleteLocations(
    args: Prisma.LocationsDeleteArgs
  ): Promise<PrismaLocations> {
    return this.prisma.locations.delete(args);
  }
}

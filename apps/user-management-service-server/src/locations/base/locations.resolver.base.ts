/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Locations } from "./Locations";
import { LocationsCountArgs } from "./LocationsCountArgs";
import { LocationsFindManyArgs } from "./LocationsFindManyArgs";
import { LocationsFindUniqueArgs } from "./LocationsFindUniqueArgs";
import { CreateLocationsArgs } from "./CreateLocationsArgs";
import { UpdateLocationsArgs } from "./UpdateLocationsArgs";
import { DeleteLocationsArgs } from "./DeleteLocationsArgs";
import { LocationsService } from "../locations.service";
@graphql.Resolver(() => Locations)
export class LocationsResolverBase {
  constructor(protected readonly service: LocationsService) {}

  async _locationsItemsMeta(
    @graphql.Args() args: LocationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Locations])
  async locationsItems(
    @graphql.Args() args: LocationsFindManyArgs
  ): Promise<Locations[]> {
    return this.service.locationsItems(args);
  }

  @graphql.Query(() => Locations, { nullable: true })
  async locations(
    @graphql.Args() args: LocationsFindUniqueArgs
  ): Promise<Locations | null> {
    const result = await this.service.locations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Locations)
  async createLocations(
    @graphql.Args() args: CreateLocationsArgs
  ): Promise<Locations> {
    return await this.service.createLocations({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Locations)
  async updateLocations(
    @graphql.Args() args: UpdateLocationsArgs
  ): Promise<Locations | null> {
    try {
      return await this.service.updateLocations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Locations)
  async deleteLocations(
    @graphql.Args() args: DeleteLocationsArgs
  ): Promise<Locations | null> {
    try {
      return await this.service.deleteLocations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

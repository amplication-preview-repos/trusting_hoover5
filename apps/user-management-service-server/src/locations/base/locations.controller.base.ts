/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LocationsService } from "../locations.service";
import { LocationsCreateInput } from "./LocationsCreateInput";
import { Locations } from "./Locations";
import { LocationsFindManyArgs } from "./LocationsFindManyArgs";
import { LocationsWhereUniqueInput } from "./LocationsWhereUniqueInput";
import { LocationsUpdateInput } from "./LocationsUpdateInput";

export class LocationsControllerBase {
  constructor(protected readonly service: LocationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Locations })
  async createLocations(
    @common.Body() data: LocationsCreateInput
  ): Promise<Locations> {
    return await this.service.createLocations({
      data: data,
      select: {
        city: true,
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Locations] })
  @ApiNestedQuery(LocationsFindManyArgs)
  async locationsItems(@common.Req() request: Request): Promise<Locations[]> {
    const args = plainToClass(LocationsFindManyArgs, request.query);
    return this.service.locationsItems({
      ...args,
      select: {
        city: true,
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
        zipCode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Locations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async locations(
    @common.Param() params: LocationsWhereUniqueInput
  ): Promise<Locations | null> {
    const result = await this.service.locations({
      where: params,
      select: {
        city: true,
        createdAt: true,
        id: true,
        state: true,
        updatedAt: true,
        zipCode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Locations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLocations(
    @common.Param() params: LocationsWhereUniqueInput,
    @common.Body() data: LocationsUpdateInput
  ): Promise<Locations | null> {
    try {
      return await this.service.updateLocations({
        where: params,
        data: data,
        select: {
          city: true,
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Locations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLocations(
    @common.Param() params: LocationsWhereUniqueInput
  ): Promise<Locations | null> {
    try {
      return await this.service.deleteLocations({
        where: params,
        select: {
          city: true,
          createdAt: true,
          id: true,
          state: true,
          updatedAt: true,
          zipCode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
